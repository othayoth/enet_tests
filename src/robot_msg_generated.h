// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROBOTMSG_ROBOTFLATBUFFER_H_
#define FLATBUFFERS_GENERATED_ROBOTMSG_ROBOTFLATBUFFER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace RobotFlatBuffer {

struct pos_img;
struct pos_imgBuilder;

struct robot_msg;
struct robot_msgBuilder;

struct pos_img FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef pos_imgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  bool mutate_x(float _x = 0.0f) {
    return SetField<float>(VT_X, _x, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  bool mutate_y(float _y = 0.0f) {
    return SetField<float>(VT_Y, _y, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           verifier.EndTable();
  }
};

struct pos_imgBuilder {
  typedef pos_img Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(pos_img::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(pos_img::VT_Y, y, 0.0f);
  }
  explicit pos_imgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<pos_img> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<pos_img>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<pos_img> Createpos_img(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f) {
  pos_imgBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct robot_msg FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef robot_msgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJ_A = 4,
    VT_OBJ_B = 6
  };
  const RobotFlatBuffer::pos_img *obj_a() const {
    return GetPointer<const RobotFlatBuffer::pos_img *>(VT_OBJ_A);
  }
  RobotFlatBuffer::pos_img *mutable_obj_a() {
    return GetPointer<RobotFlatBuffer::pos_img *>(VT_OBJ_A);
  }
  const RobotFlatBuffer::pos_img *obj_b() const {
    return GetPointer<const RobotFlatBuffer::pos_img *>(VT_OBJ_B);
  }
  RobotFlatBuffer::pos_img *mutable_obj_b() {
    return GetPointer<RobotFlatBuffer::pos_img *>(VT_OBJ_B);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJ_A) &&
           verifier.VerifyTable(obj_a()) &&
           VerifyOffset(verifier, VT_OBJ_B) &&
           verifier.VerifyTable(obj_b()) &&
           verifier.EndTable();
  }
};

struct robot_msgBuilder {
  typedef robot_msg Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obj_a(::flatbuffers::Offset<RobotFlatBuffer::pos_img> obj_a) {
    fbb_.AddOffset(robot_msg::VT_OBJ_A, obj_a);
  }
  void add_obj_b(::flatbuffers::Offset<RobotFlatBuffer::pos_img> obj_b) {
    fbb_.AddOffset(robot_msg::VT_OBJ_B, obj_b);
  }
  explicit robot_msgBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<robot_msg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<robot_msg>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<robot_msg> Createrobot_msg(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<RobotFlatBuffer::pos_img> obj_a = 0,
    ::flatbuffers::Offset<RobotFlatBuffer::pos_img> obj_b = 0) {
  robot_msgBuilder builder_(_fbb);
  builder_.add_obj_b(obj_b);
  builder_.add_obj_a(obj_a);
  return builder_.Finish();
}

inline const RobotFlatBuffer::robot_msg *Getrobot_msg(const void *buf) {
  return ::flatbuffers::GetRoot<RobotFlatBuffer::robot_msg>(buf);
}

inline const RobotFlatBuffer::robot_msg *GetSizePrefixedrobot_msg(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RobotFlatBuffer::robot_msg>(buf);
}

inline robot_msg *GetMutablerobot_msg(void *buf) {
  return ::flatbuffers::GetMutableRoot<robot_msg>(buf);
}

inline RobotFlatBuffer::robot_msg *GetMutableSizePrefixedrobot_msg(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<RobotFlatBuffer::robot_msg>(buf);
}

inline bool Verifyrobot_msgBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RobotFlatBuffer::robot_msg>(nullptr);
}

inline bool VerifySizePrefixedrobot_msgBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RobotFlatBuffer::robot_msg>(nullptr);
}

inline const char *robot_msgExtension() {
  return "bfbs";
}

inline void Finishrobot_msgBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RobotFlatBuffer::robot_msg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedrobot_msgBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RobotFlatBuffer::robot_msg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace RobotFlatBuffer

#endif  // FLATBUFFERS_GENERATED_ROBOTMSG_ROBOTFLATBUFFER_H_
